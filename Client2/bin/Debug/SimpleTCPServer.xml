<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTCPServer</name>
    </assembly>
    <members>
        <member name="T:SimpleTCPServer.Core.TCPServer">
            <summary>
            The main class for creating a simple tcp server
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.Net.IPEndPoint,SimpleTCPServer.Core.TCPServerConfig)">
            <summary>
            Initializes this class with an IPEndpoint and config
            </summary>
            <param name="endpoint">The IPEndpoint</param>
            <param name="config">The configuration</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes this class with an IPEndpoint
            </summary>
            <param name="endpoint">The ipendpoint</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes this class with an IPAddress and port
            </summary>
            <param name="address">The IPAddress</param>
            <param name="port">The port</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.Net.IPAddress,System.Int32,SimpleTCPServer.Core.TCPServerConfig)">
            <summary>
            Intitializes this class with an IPAddress, port and config
            </summary>
            <param name="address">The ip address</param>
            <param name="port">The port</param>
            <param name="config">The configuration</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes this class with a string address and a port
            </summary>
            <param name="address">The string ip address</param>
            <param name="port">The port</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.String,System.Int32,SimpleTCPServer.Core.TCPServerConfig)">
            <summary>
            Initializes this class with a string address, a port and a config
            </summary>
            <param name="address">The string ip address</param>
            <param name="port">The port</param>
            <param name="config">The configuration</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.String)">
            <summary>
            Initializes this class with an IPEndpoint string
            </summary>
            <param name="ipendpoint">The IPEndpoint string</param>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.#ctor(System.String,SimpleTCPServer.Core.TCPServerConfig)">
            <summary>
            Initializes this class with a string which contains the ip and port and a config
            </summary>
            <param name="ipendpoint">The IPEndpoint string</param>
            <param name="config">The configuration</param>
        </member>
        <member name="P:SimpleTCPServer.Core.TCPServer.Endpoint">
            <summary>
            The ip endpoint
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.StartAsync">
            <summary>
            Starts everything in the server
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TCPServer.Config">
            <summary>
            The config for the tcp server
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TCPServer.Clients">
            <summary>
            The list of connected clients
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Core.TCPServer.StopTask(System.Int64)">
            <summary>
            Stops a task with that taskid
            </summary>
            <param name="taskId">The task id</param>
        </member>
        <member name="E:SimpleTCPServer.Core.TCPServer.Log">
            <summary>
            The log Task
            </summary>
        </member>
        <member name="E:SimpleTCPServer.Core.TCPServer.OnReady">
            <summary>
            The event thats fired when the server is listening
            </summary>
        </member>
        <member name="E:SimpleTCPServer.Core.TCPServer.OnClientConnect">
            <summary>
            The event thats fired when a client connects
            </summary>
        </member>
        <member name="E:SimpleTCPServer.Core.TCPServer.OnClientLeave">
            <summary>
            The event thats fired when a client leaves
            </summary>
        </member>
        <member name="E:SimpleTCPServer.Core.TCPServer.BytesReceived">
            <summary>
            The event thats fired when bytes are received
            </summary>
        </member>
        <member name="T:SimpleTCPServer.Core.TaskHolder">
            <summary>
            A holder of a Task, CancellationTokenSource and a TaskType
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TaskHolder.TokenSource">
            <summary>
            The token
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TaskHolder.Type">
            <summary>
            The TaskType
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Core.TaskHolder.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Core.TaskHolder.#ctor(System.Threading.CancellationTokenSource,SimpleTCPServer.Core.TaskType)">
            <summary>
            The constructor of a TaskHolder
            </summary>
            <param name="source">The source for the cancellation token</param>
            <param name="tasktype">The type of task</param>
        </member>
        <member name="T:SimpleTCPServer.Core.TaskType">
            <summary>
            Specifies the type of Task from the thread pool
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Core.TaskType.User">
            <summary>
            A task for a user
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Core.TaskType.Receiving">
            <summary>
            A task for receiving bytes from a user
            </summary>
        </member>
        <member name="T:SimpleTCPServer.Core.TCPServerConfig">
            <summary>
            A class for storing the settings of the TCP server
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TCPServerConfig.BytesSize">
            <summary>
            The byte array size
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Core.TCPServerConfig.KeepListOfClients">
            <summary>
            Keep a collection of the connected clients
            </summary>
        </member>
        <member name="T:SimpleTCPServer.Extensions.Methods">
            <summary>
            The class for the methods of converting byte arrays and parsing IP addresses
            </summary>
        </member>
        <member name="M:SimpleTCPServer.Extensions.Methods.CreateIPEndPoint(System.String)">
            <summary>
            Converts a string with an ip and port to an IPEndpoint
            </summary>
            <param name="endPoint">The string to be converted</param>
            <returns>Returns the string converted to an IPEndpoint</returns>
        </member>
        <member name="M:SimpleTCPServer.Extensions.Methods.ToByteArray(System.Object)">
            <summary>
            Converts the object to a byte array
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>Returns the object converted to a byte array</returns>
        </member>
        <member name="M:SimpleTCPServer.Extensions.Methods.FromByteArray``1(System.Byte[])">
            <summary>
            Converts a byte array to any type
            </summary>
            <typeparam name="T">The type to convert the byte array to</typeparam>
            <param name="arrBytes">The byte array</param>
            <returns>Returns the byte array converted to the specified type</returns>
        </member>
        <member name="T:SimpleTCPServer.Logging.ILogMessage">
            <summary>
            A log message
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Logging.ILogMessage.Content">
            <summary>
            The content
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Logging.ILogMessage.Source">
            <summary>
            The source of the log message
            </summary>
        </member>
        <member name="P:SimpleTCPServer.Logging.ILogMessage.Type">
            <summary>
            The type of the log message
            </summary>
        </member>
        <member name="T:SimpleTCPServer.Logging.LogMessageType">
            <summary>
            The log message's type
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Logging.LogMessageType.ClientConnected">
            <summary>
            A user joined
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Logging.LogMessageType.BytesReceived">
            <summary>
            Bytes are received
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Logging.LogMessageType.ServerReady">
            <summary>
            The server is ready/listening for connections
            </summary>
        </member>
        <member name="F:SimpleTCPServer.Logging.LogMessageType.ClientDisconnected">
            <summary>
            A client has left
            </summary>
        </member>
    </members>
</doc>
